{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction followAPI(data) {\n  return axios.post('/api/user', data);\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    //const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/workspace/react-sns/prepare/front/Sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","followAPI","data","post","follow","action","type","FOLLOW_SUCCESS","err","FOLLOW_FAILURE","error","response","logInAPI","logIn","logOutAPI","logOut","signUpAPI","signUp","SIGN_UP_FAILURE","watchFollow","FOLLOW_REQUEST","watchUnfollow","UNFOLLOW_REQUEST","unfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\r\n\r\nfunction followAPI(data) {\r\n  return axios.post('/api/user', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    //const result = yield call(followAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data\r\n    });\r\n  }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    //const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signUp');\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    //const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}